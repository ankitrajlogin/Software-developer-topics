# CAP Theorem – Complete Notes

## What is the CAP Theorem?
CAP Theorem (Brewer’s Theorem) is a fundamental principle in distributed systems describing a trade-off between:
- Consistency (C)
- Availability (A)
- Partition Tolerance (P)

It states: a distributed system can guarantee at most two of the three properties simultaneously. During network partitions, a choice must be made between Consistency and Availability. Proposed by Eric Brewer (2000) and formalized by Gilbert & Lynch (2002).

---

## The three components

1. Consistency (C)
- Every read returns the most recent write (or an error).
- All nodes see the same data at the same time.
- Pros: Reliable, predictable reads.
- Cons: Higher latency (synchronization), possible unavailability during partitions.
- Analogy: Everyone editing a single live Google Doc sees the same content.

2. Availability (A)
- Every request receives a response (success or failure).
- System continues to reply even if some nodes are down.
- Pros: High uptime, low latency.
- Cons: May return stale/outdated data.
- Analogy: A restaurant chain where another branch serves you if one is closed.

3. Partition Tolerance (P)
- System keeps working despite network failures between nodes.
- Pros: Fault-tolerant, resilient.
- Cons: Increased system complexity and harder to keep strong consistency.

---

## Key trade-off
- Network partitions are inevitable in distributed systems → Partition Tolerance is mandatory.
- When a partition occurs, you must choose:
  - C (Consistency) — sacrifice availability, or
  - A (Availability) — sacrifice consistency.
- Thus, practical systems are generally CP or AP. CA is only applicable when partitions do not occur (single-node or fully connected environments).

Table of common categories:
- CA (Consistency + Availability): works only with no partitions (e.g., single-node RDBMS).
- CP (Consistency + Partition Tolerance): stays consistent, can reject requests during partitions (e.g., MongoDB in some configs, HBase).
- AP (Availability + Partition Tolerance): stays available, may return stale data (e.g., Cassandra, DynamoDB, CouchDB).

ASCII visualization:
       Consistency
        /       \
       /         \
      /           \
 Availability --- Partition Tolerance

Pick any two, not all three at once.

---

## CAP Theorem for Databases and Partition Tolerance
- Under normal operation, a distributed database can appear to provide C, A, and P.
- During network partitions, P is required; the system must choose C or A.
- CP databases prioritize correctness (may become unavailable during partition).
- AP databases prioritize uptime (may serve eventual/stale data).

Examples:
- CP: MongoDB (config-dependent), HBase, Zookeeper (focus on consistency)
- AP: Cassandra, DynamoDB, CouchDB (focus on availability/eventual consistency)

---

## Eventual consistency
- Common in AP systems: replicas converge to the same value eventually.
- Reads may reflect stale data until the system heals and propagation completes.

---

## CAP vs ACID — Short comparison
- CAP applies to distributed systems (trade-offs during partitions).
- ACID applies to transactions (single-node DBs) to ensure correctness and durability.

ACID components:
- Atomicity: all-or-nothing transactions.
- Consistency: transaction moves DB from valid state to valid state (constraints maintained).
- Isolation: concurrent transactions do not interfere.
- Durability: committed transactions persist after crashes.

Difference in "Consistency":
- CAP Consistency: all replicas see the same most recent data.
- ACID Consistency: each transaction preserves database integrity rules.

When to use:
- Banking/financial systems → ACID (strong correctness).
- Large-scale distributed services → CAP considerations (pick CP or AP based on requirements).

---

## Real-world examples (brief)
- MongoDB → often CP (can reject writes to keep strong consistency)
- Cassandra → AP (prioritizes availability and partition tolerance)
- DynamoDB → AP (eventual consistency modes)
- Zookeeper → CP (coordination service prioritizing consistency)

---

## Decision guidance
- If correctness is critical (e.g., banking), prefer consistency (CP).
- If uptime and responsiveness matter more than immediate correctness (e.g., social feeds), prefer availability (AP).
- Design choices also include hybrid strategies: tunable consistency, quorum reads/writes, conflict resolution (CRDTs), and multi-master replication schemes.

---

## Interview tip
“In the presence of a network partition, a distributed system must choose between Consistency and Availability. Partition Tolerance is a practical necessity.”

---

## Quick summary table
Property | Description | Benefit | Trade-off
---|---:|---|---
Consistency (CAP) | All nodes see same data | Reliable reads | Lower availability during partitions
Availability | Every request gets a response | High uptime | May serve stale data
Partition Tolerance | System runs across network failures | Fault tolerant | Harder to maintain strict consistency

---

## Final notes
- Partition failures happen; plan for them.
- Use quorum techniques, read/write tuning, and application-level conflict handling to balance needs.
- CAP is a guideline for trade-offs, not a strict prohibition — many systems implement configurable compromises (e.g., tunable consistency levels).

